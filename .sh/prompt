# SCM status information in the prompt.
unset PSGIT
PSGITCMD=':'
which git >/dev/null && PSGITCMD='gitprompt'
gitprompt() {
	local branch="$(git symbolic-ref HEAD 2>/dev/null)"
	local flags=''
	if [ -n "$branch" ]; then
		echo -n "${branch#refs/heads/} "
		# svn-ahead returns nothing if this is no git-svn repo
		flags="$(git svn-ahead %ds | sed -e 's/^0s$/s/')"
		flags="$flags$(git status 2>/dev/null | sed -n -e '/^# /!s/^/# /' -e 's/^# Your branch is ahead of .\{1,\} by \([0-9]\{1,\}\) commits\{0,1\}\.$/\1/p' -e 's/^# Your branch is behind .\{1,\} by \([0-9]\{1,\}\) commits\{0,1\}, and can be fast-forwarded\.$/-\1f/p' -e 's/^# and have \([0-9]\{1,\}\) and \([0-9]\{1,\}\) different commit(s) each, respectively.$/\2Y\1/p' -e 's/^# Changes to be committed:$/+/p' -e 's/^# Changed but not updated:$/~/p' -e 's/^# Changes not staged for commit:$/~/p' -e 's/^# Untracked files:$/?/p' | tr -d \\n)"
		# I sometimes forget that a subdirectory of ~/proj is not a Git repo.
		# Warn me if the ~/proj subdir I'm in is no repo (and Git works with ~).
		echo "$PWD" | grep -q "^$HOME/proj" && [ "$(readlink -f "./$(git rev-parse --show-cdup)" 2>/dev/null)" = "$HOME" ] && flags="$flags\\[\\e[0;31m!\\]"
		[ -n "$flags" ] && echo -n "$flags "
	fi
}

# Load status in the prompt.
# If we have /proc/loadavg, use it.
if [ -r '/proc/loadavg' ]; then
	PSLOADCMD='loadprompt'
else
	# Simply display nothing.
	PSLOADCMD=':'
fi
loadprompt() {
	echo "$(cut -d ' ' -f 1 /proc/loadavg 2>/dev/null) "
}

# Define the prompt.

scyprompt() {
	local r="$?"
	# Refresh the Git prompt, if we have Git.
	PSGIT="$($PSGITCMD)"
	# Refresh the load average.
	PSLOAD="$($PSLOADCMD)"
	# Refresh the jobs count.
	local runningjobs="$(jobs -r | wc -l | tr -cd 0-9)"
	local stoppedjobs="$(jobs -s | wc -l | tr -cd 0-9)"
	PSJOBS="$([[ "$runningjobs" -gt 0 ]] && echo -n "${runningjobs}r")$([[ "$runningjobs" -gt 0 && "$stoppedjobs" -gt 0 ]] && echo -n '/')$([[ "$stoppedjobs" -gt 0 ]] && echo -n "${stoppedjobs}s")"
	[ -n "$PSJOBS" ] && PSJOBS="$PSJOBS "
	# End of refreshments. Start working.
	PS1="$PSFIX"
	# Git info.
	PS1="$PS1\\[\\e[0;36m\\]$PSGIT"
	# Load average.
	PS1="$PS1\\[\\e[1;30m\\]$PSLOAD"
	# Current time.
	PS1="$PS1\\[\\e[0;37m\\]\\A "
	# Number of jobs.
	PS1="$PS1\\[\\e[0;33m\\]$PSJOBS"
	# Prompt character. Red (and showing return value) on error.
	if [[ "$r" -gt 0 ]]; then
		PS1="$PS1\\[\\e[1;31m\\]$r\\$"
	else
		PS1="$PS1\\[\\e[1;32m\\]\\$"
	fi
	# Back to normal.
	PS1="$PS1\\[\\e[0m\\] "
}

PSUSERCOLOR=33                           # yellow by default
# green if it's my everyday user ("scy" or, at work, "weber")
if [ "$HOSTNAME" = 'silberschweif' -o "$HOSTNAME" = 'nebukadnezar' ]; then
	[ "$USER" = 'weber' ] && PSUSERCOLOR=32
else
	[ "$USER" = 'scy' ] && PSUSERCOLOR=32
fi
[ "$UID" -eq 0 ] && PSUSERCOLOR=31       # red if root

case "$HOSTNAME" in
	crys)
		PSHOSTCOLOR=32;;   # green for the default, crys.
	nebukadnezar)
		PSHOSTCOLOR=31;;   # red for "be careful" machines
	silberschweif)
		PSHOSTCOLOR='';;   # default for work machine
	malus)
		PSHOSTCOLOR=35;;   # magenta for malus
	*)
		PSHOSTCOLOR=33;;   # yellow by default
esac

# Use window titles only in known X terminals.
case "$TERM" in
	xterm*|rxvt*|Eterm|aterm|kterm|gnome|screen)
		PSTITLE='\[\e]0;\u@\h:\w\a\]';;
	*)
		unset PSTITLE;;
esac

# Window title, if in a supported terminal.
PSFIX="$PSTITLE"
# User name, colored accordingly.
PSFIX="$PSFIX\\[\\e[1;${PSUSERCOLOR}m\\]\\u"
# @ character.
PSFIX="$PSFIX\\[\\e[0;32m\\]@"
# Host name, colored accordingly.
PSFIX="$PSFIX\\[\\e[1;${PSHOSTCOLOR}m\\]\\h"
# Working directory.
PSFIX="$PSFIX\\[\\e[1;34m\\] \\w "

PROMPT_COMMAND='scyprompt'
